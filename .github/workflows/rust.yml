name: Rust

on:
  push:
    branches:
      - main
      - ci-cd
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Check
    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions/checkout@v3
      - run: |
          rustup component add rustfmt clippy
          cargo check
          cargo fmt --all -- --check
          cargo clippy -- -Dwarnings
  build-windows:
    runs-on: windows-latest
    name: Release build for Windows
    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions/checkout@v3
      - name: Build release binary
        run: cargo build --release
        env:
          RUSTFLAGS: '-C target-feature=+crt-static'
      - uses: actions/upload-artifact@v3
        with:
          name: awsbck-windows
          path: target/release/awsbck.exe

  build-macos:
    runs-on: macos-latest
    name: Release build for macOS
    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: actions/checkout@v3
      - name: Build release binary
        run: cargo build --release
        env:
          LZMA_API_STATIC: 'true'
      - uses: actions/upload-artifact@v3
        with:
          name: awsbck-macos
          path: target/release/awsbck

  build-linux:
    runs-on: ubuntu-latest
    name: Release build for linux x86_64
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl
      - uses: Swatinem/rust-cache@v2
      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools
      - uses: actions/checkout@v3
      - name: Build release binary
        run: cargo build --release --target x86_64-unknown-linux-musl
      - uses: actions/upload-artifact@v3
        with:
          name: awsbck-linux
          path: target/x86_64-unknown-linux-musl/release/awsbck

  build-arm:
    name: Release builds for linux ARM
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-gnueabihf
            arch: armv7
        target: ['aarch64-unknown-linux-musl', 'armv7-unknown-linux-gnueabihf']
    runs-on: ubuntu-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cross --git https://github.com/cross-rs/cross
      - uses: actions/checkout@v3
      - run: cross build --release --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v3
        with:
          name: awsbck-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/awsbck
